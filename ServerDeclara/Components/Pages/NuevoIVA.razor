@page "/NuevoComprobante"
@inject IVAServicio _ivaServicio
@inject IJSRuntime _js

<div style="text-align:center">
    <p class="@escuchaEmpresa">Empresa</p>
    <p style="color:red">@(nuevaEntradaIVA.Comercio != null ? nuevaEntradaIVA.Comercio.RazonSocial : "No encontrado")</p>

    <p class="@escuchaFecha">Fecha</p>
    <p style="color:red">@(nuevaEntradaIVA.Fecha != DateTime.MinValue ? nuevaEntradaIVA.Fecha : "Sin fecha")</p>


    <p class="@escuchaMonto">Monto</p>
    <p style="color:red">@nuevaEntradaIVA.MontoMasIVA</p>

    <p class="@escuchaIVA">IVA</p>
    <p style="color:red">@nuevaEntradaIVA.MontoIVA</p>
</div>

@code {
    string escuchaEmpresa = "";
    string escuchaFecha = "";
    string escuchaMonto = "";
    string escuchaIVA = "";

    List<ComercioDTO> Comercios = new();
    EntradaIVADiarioDTO nuevaEntradaIVA = new();

    protected override async Task OnInitializedAsync()
    {
        Comercios = await _ivaServicio.GetListadoComerciosPorUsuario();

        await Escucha();
    }

    private async Task Escucha()
    {
        await EscucharEmpresa();

        await EscucharFecha();

        //en realidad es monto SIN IVA
        nuevaEntradaIVA.MontoMasIVA = await EscucharValorNumerico("monto");

        nuevaEntradaIVA.MontoIVA = await EscucharValorNumerico("iva");

    }

    private async Task EscucharFecha()
    {
        string textoDeEscucha = "";

        await IconoEscucha("fecha");

        textoDeEscucha = await _js.InvokeAsync<string>("LeerVoz");

        if (string.IsNullOrEmpty(textoDeEscucha)) return;

        DateTime fecha = ProcesadorVoz.ProcesarFechaPorVoz(textoDeEscucha);

        if (fecha != DateTime.MinValue) nuevaEntradaIVA.Fecha = fecha;
    }

    private async Task EscucharEmpresa()
    {
        string textoDeEscucha = "";

        await IconoEscucha("empresa");

        textoDeEscucha = await _js.InvokeAsync<string>("LeerVoz");

        if (string.IsNullOrEmpty(textoDeEscucha)) return;

        ComercioDTO comercioBuscado = await ProcesadorVoz.BusquedaComercioPorRazonSocial(textoDeEscucha, Comercios);

        if (comercioBuscado != null) nuevaEntradaIVA.Comercio = comercioBuscado;

    }

    private async Task<double> EscucharValorNumerico(string tipoIcono)
    {
        string textoDeEscucha = "";

        await IconoEscucha(tipoIcono);

        textoDeEscucha = await _js.InvokeAsync<string>("LeerVoz");

        if (string.IsNullOrEmpty(textoDeEscucha)) return 0;

        double valor = ProcesadorVoz.ProcesarValoresPorVoz(textoDeEscucha);

        return valor;
    }
    private async Task IconoEscucha(string foco)
    {

        escuchaEmpresa = "";
        escuchaFecha = "";
        escuchaMonto = "";
        escuchaIVA = "";

        switch (foco)
        {
            case "empresa":
                escuchaEmpresa = "beforeIconEscucha";
                break;
            case "fecha":
                escuchaFecha = "beforeIconEscucha";
                break;
            case "monto":
                escuchaMonto = "beforeIconEscucha";
                break;
            case "iva":
                escuchaIVA = "beforeIconEscucha";
                break;
            default:
                break;
        }
        StateHasChanged();
    }
}
