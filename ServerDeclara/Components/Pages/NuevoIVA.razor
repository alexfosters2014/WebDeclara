@page "/NuevoComprobante"
@inject IVAServicio _ivaServicio
@inject IJSRuntime _js

@if (!ModoManual)
{
    <div style="text-align:center">
        <p class="@escuchaEmpresa">Empresa</p>
        <p style="color:red">@(nuevaEntradaIVA.Comercio != null ? nuevaEntradaIVA.Comercio.RazonSocial : "No encontrado")</p>

        <p class="@escuchaFecha">Fecha</p>
        <p style="color:red">@(nuevaEntradaIVA.Fecha != DateTime.MinValue ? nuevaEntradaIVA.Fecha : "Sin fecha")</p>


        <p class="@escuchaMonto">Monto</p>
        <p style="color:red">@nuevaEntradaIVA.MontoMasIVA</p>

        <p class="@escuchaIVA">IVA</p>
        <p style="color:red">@nuevaEntradaIVA.MontoIVA</p>

      

        <p class="@escuchaCompraVenta">Tipo de IVA (Compra o Venta)</p>
        <p style="color:red">@(nuevaEntradaIVA.TipoIva != "" ? nuevaEntradaIVA.TipoIva : "")</p>
    </div>

}
else
{
    <section class="d-flex flex-column justify-content-center p-4">
       
       
            <select @onchange="SeleccionarComercioManual" placeholder="Mes1" class="form-control">
            <option value="0" selected>Elija un comercio</option>
                @foreach (var item in Comercios)
                {
                    @if (nuevaEntradaIVA.Comercio != null && item.Id == nuevaEntradaIVA.Comercio.Id)
                    {
                        <option value="@item.Id" selected>@item.RUT - @item.RazonSocial</option>
                    }
                    else
                    {
                    <option value="@item.Id">@item.RUT - @item.RazonSocial</option>
                    }
                }
            </select>

        <input type="date" @bind-value="nuevaEntradaIVA.Fecha" />

        

        <input type="number" @bind-value="nuevaEntradaIVA.MontoIVA" />

        @if (nuevaEntradaIVA.TipoIva == Util.TipoIva.VENTA.ToString())
        {
            <p>IVA retenido por venta</p>
            <input type="number" @bind-value="nuevaEntradaIVA.MontoIvaRetenido" />
        }}

        <input type="text" @bind-value="nuevaEntradaIVA.TipoIva" />
        }


    </section>
}



@code {
    int? idComercio;
    bool ModoManual = false;
    string escuchaEmpresa = "";
    string escuchaFecha = "";
    string escuchaMonto = "";
    string escuchaIVA = "";
    string escuchaCompraVenta = "";

    List<ComercioDTO> Comercios = new();
    EntradaIVADiarioDTO nuevaEntradaIVA = new();

    protected override async Task OnInitializedAsync()
    {
        Comercios = await _ivaServicio.GetListadoComerciosPorUsuario();

        await Escucha();
    }

    private async Task Escucha()
    {
        await EscucharEmpresa();

        await EscucharFecha();

        //en realidad es monto SIN IVA
        nuevaEntradaIVA.MontoMasIVA = await EscucharValorNumerico("monto");

        nuevaEntradaIVA.MontoIVA = await EscucharValorNumerico("iva");

        await EscucharCompraVenta();

        ModoManual = true;
    }

    private async Task EscucharFecha()
    {
        string textoDeEscucha = "";

        await IconoEscucha("fecha");

        textoDeEscucha = await _js.InvokeAsync<string>("LeerVoz");

        if (string.IsNullOrEmpty(textoDeEscucha)) return;

        DateTime fecha = ProcesadorVoz.ProcesarFechaPorVoz(textoDeEscucha);

        if (fecha != DateTime.MinValue) nuevaEntradaIVA.Fecha = fecha;
    }

    private async Task EscucharEmpresa()
    {
        string textoDeEscucha = "";

        await IconoEscucha("empresa");

        textoDeEscucha = await _js.InvokeAsync<string>("LeerVoz");

        if (string.IsNullOrEmpty(textoDeEscucha)) return;

        ComercioDTO comercioBuscado = await ProcesadorVoz.BusquedaComercioPorRazonSocial(textoDeEscucha, Comercios);

        if (comercioBuscado != null) nuevaEntradaIVA.Comercio = comercioBuscado;

    }

    private async Task<double> EscucharValorNumerico(string tipoIcono)
    {
        string textoDeEscucha = "";

        await IconoEscucha(tipoIcono);

        textoDeEscucha = await _js.InvokeAsync<string>("LeerVoz");

        if (string.IsNullOrEmpty(textoDeEscucha)) return 0;

        double valor = ProcesadorVoz.ProcesarValoresPorVoz(textoDeEscucha);

        return valor;
    }

    private async Task EscucharCompraVenta()
    {
        string textoDeEscucha = "";

        await IconoEscucha("compra-venta");

        textoDeEscucha = await _js.InvokeAsync<string>("LeerVoz");

        if (string.IsNullOrEmpty(textoDeEscucha)) return;

        string compraVenta = ProcesadorVoz.ProcesarCompraVentaPorVoz(textoDeEscucha);

        if (compraVenta != "")
        {
            nuevaEntradaIVA.TipoIva = compraVenta;
        }
    }

    private async Task IconoEscucha(string foco)
    {

        escuchaEmpresa = "";
        escuchaFecha = "";
        escuchaMonto = "";
        escuchaIVA = "";
        escuchaCompraVenta = "";

        switch (foco)
        {
            case "empresa":
                escuchaEmpresa = "beforeIconEscucha";
                break;
            case "fecha":
                escuchaFecha = "beforeIconEscucha";
                break;
            case "monto":
                escuchaMonto = "beforeIconEscucha";
                break;
            case "iva":
                escuchaIVA = "beforeIconEscucha";
                break;
            case "compra-venta":
                escuchaCompraVenta = "beforeIconEscucha";
                break;
            default:
                break;
        }
        StateHasChanged();
    }
    private void SeleccionarComercioManual(ChangeEventArgs e)
    {
        int idComercio = int.Parse(e.Value.ToString());
        if (idComercio > 0)
        {
            nuevaEntradaIVA.Comercio = Comercios.FirstOrDefault(f => f.Id == idComercio);
        }
    }
}
